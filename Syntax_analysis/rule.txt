<program> <sections>
<sections> <function> <sections>
<sections> <declaration> <sections>
<sections> <main>
<function> <type> <id> ( <parameters> <body>
<main> <type> main ( <parameters> <body>
<parameters> )
<parameters> <type> <id> , <parameters>
<body> { <sentences>
<sentences> <sentence> <sentences>
<sentences> }
<sentence> <declaration>
<sentence> <if_section>
<sentence> <while_section>
<sentence> <Expression> 
<declaration> <type> <var> <var_list>
<var_list> , <var> <var_list>
<var_list> ;
<var> <id> [ <const_int> ] 
<var> <id>
<if_section> if <expression> <body> <else_section>
<else_section> ;
<else_section> else <body> ;
<while_section> while <expression> <body> ;

<Expression> <expression> ;
<expression> <id> = <expression>
<or_expression> <and_expression> or <or_expression>
<and_expression> <not_expression> and <and_expression>
<not_expression> not <cmp_expression>
<cmp_expression> <add_expression> <cmp_operation> <add_expression>
<add_expression> <mul_expression> <add_operation> <add_expression>
<mul_expression> <min_expression> <mul_operation> <mul_expression>
<min_expression> ( <expression> )
<min_expression> <const>
<min_expression> <id>
<min_expression> ^ <id>
<min_expression> & <id>
<min_expression> <id> [ <expression> ]
<min_expression> <id> ( <argv> 
<argv> )
<argv> <id> , <argv>

<expression> <or_expression>
<or_expression> <and_expression>
<and_expression> <not_expression>
<not_expression> <cmp_expression>
<cmp_expression> <add_expression>
<add_expression> <mul_expression>
<mul_expression> <min_expression>

<type> int
<type> float
<type> char
<type> ptr 
<const> <int_const>
<const> <float_const>
<const> <char_const>
<cmp_operation> <
<cmp_operation> >
<cmp_operation> !=
<cmp_operation> ==
<cmp_operation> <=
<cmp_operation> >=
<add_operation> +
<add_operation> -
<mul_operation> *
<mul_operation> /
<mul_operation> %
